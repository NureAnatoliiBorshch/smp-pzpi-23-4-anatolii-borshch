Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії

ЗВІТ
з лабораторної роботи № 1
з дисципліни «Скриптові мови програмування»

Виконав								
ст. гр. ПЗПІ-23-4
Борщ Анатолій

Перевірив
ст. викладач катедри ПІ
Сокорчук Ігор Петрович

Харків 2025

1 ІСТОРІЯ ЗМІН
№ 	Дата 		Версія звіту 	Опис змін та виправлень
1 	06.05.2025 	0.1 		Створено розділ «Історія змін»
2 	06.05.2025 	0.1 		Створено розділ «Завдання»
3 	06.05.2025 	0.1 		Створено розділ «Опис виконаної роботи»
4 	06.05.2025 	0.1 		Створено розділ «Висновки»
5 	06.05.2025 	0.1 		Створено розділ «Додаток В»

2 ЗАВДАННЯ
     1.1 Мета роботи:
     Ознайомитися з основними командами Bash для роботи з файлами та текстовими даними.
     Навчитися використовувати команди select, ls, awk, sort, uniq, tee, cat, sed, iconv тощо.
     Розробити Bash-скрипт для перетворення CSV файла розкладу занять у придатний для імпорту в Google Календар CSV формат.
     1.2 Завдання
     Розробити Bash-скрипт, який обробляє експортований із сайту https://cist.nure.ua/ розклад занять для всіх груп потоку в форматі CSV та перетворює його у формат CSV для завантаження в Google Календар https://support.google.com/.
     1.3 Вимоги
     Ключі:
• --help — вивести довідку, завершити роботу та повернути успішний результат у батьківський процес
• --version — вивести інформацію про версію, завершити роботу та повернути успішний результат у батьківський процес
• -q або --quiet — не виводити інформацію в стандартний потік виведення
     Параметри:
• академ_група — назва академічної групи (шаблон)
• файл_із_cist.csv — експортований CSV файл розкладу занять
     Якщо при виклику скрипта не вказана академічна група або вхідний CSV файл, то скрипт повинен:
1. Вивести меню вибору файла за допомогою команди select та сформувати відсортований за датою в іменах файлів (від старіших до новіших) список доступних у поточній директорії CSV файлів за шаблоном:
     TimeTable_??_??_20??.csv
2. Відкрити вибраний CSV файл та згенерувати список академічних груп, що містяться у файлі, відсортувати їх за алфавітом (sort, uniq) та вивести меню вибору групи за допомогою select.
     Обробка файла:
1. Читати вхідний CSV файл та вибирати рядки, що відповідають вибраній академічній групі.
2. Визначити порядкий номер для кожного заняття (лекція, практичне заняття, лабораторна робота) із врахуванням того, що лабораторні роботи складаються із двох пар, а решта занять — із однієї пари.
3. Створити поле «Subject» із поля «Тема» вхідного CSV файла, але БЕЗ назви академічної групи та дефіса на початку цього поля ("ПЗПІ-23-1 - ПрПА Пз DL ПЗПІ-23-1")
4. Додати порядковий номер наприкінці теми (Subject) кожного заняття після крапки з комою (опис заняття; №1)
5. Переформатувати дату та час до формату «mm/dd/yyyy, HH:MM AM|PM,» Gogle Календаря 12-годинний формат часу. Наприклад: 02/30/2025, 11:15 AM,
6. Заповнити поле «Description» текстом із поля «Опис (Описание)» вхідного CSV файла
7. Відформатувати дані відповідно до вимог Google Календаря https://support.google.com/calendar/.
8. Виводити створені для Google Календаря дані у стандартний потік виведення, якщо це не заблоковано ключем -q або --quiet
9. Записати результат у новий файл із назвою:
     Google_TimeTable_??_??_20??.csv
     де ??_??_20?? — дата, що відповідає вхідному файлу.
     Обробка помилок:
• Якщо файл не знайдено або файл є недоступним для читання, вивести повідомлення про помилку в стандартний потік помилок та повернути код помилки.
• Якщо група не знайдена у вибраному файлі, повідомити про це користувача та запропонувати вибір іншої групи.
• Якщо група не вказана, але у вказаному файлі присутня лише одна група, створити CSV файл Google Календаря для цієї групи.
• Якщо сталася помилка під час обробки файла, повідомити про це та завершити роботу з відповідним кодом помилки.


3 ОПИС ВИКОНАНОЇ РОБОТИ
     На початку скрипт оголошує версію програми в змінній VERSION і отримує назву виконуваного файлу, використовуючи команду basename (рядки 1-4). 
Далі визначено функцію print_help, яка виводить допомогу для користувача із синтаксисом запуску скрипта, доступними ключами та параметрами (рядки 6-14). 
Для виведення версії скрипта використовується функція print_version, що виводить інформацію про версію програми (рядки 16-18). 
Далі скрипт обробляє аргументи командного рядка: перевіряється, чи були передані параметри --help, --version, -q або --quiet, а також намагається знайти файл CSV та академічну групу (рядки 20-36).
     Якщо аргумент для файлу не був переданий, скрипт запитує у користувача вибір CSV файлу за допомогою меню, виведеного через команду select (рядки 39-49). Це меню пропонує відсортований список доступних CSV файлів за шаблоном TimeTable_??_??_20??.csv. 
Якщо ж академічна група не вказана, скрипт також виводить меню для вибору групи, де користувач може вибрати одну з доступних груп або вийти з програми (рядки 52-63).
Після вибору файлу та групи скрипт формує назву для вихідного файлу. Вихідний файл створюється на основі вибраного вхідного файлу, замінюючи початкову частину імені на Google_, а також додаючи суфікс .csv (рядки 66-67).
     У цьому блоці скрипт починає обробку даних. За допомогою команди sed замінюються символи кінця рядка, а iconv використовується для конвертації файлу з кодування CP1251 в UTF-8 (рядки 73-74). 
Далі через команду awk відбувається розбір даних, де окремо виділяються дата та час, і створюється "ключ" для сортування записів (рядки 76-92). Якщо дані про дату та час правильні, вони перетворюються в формат, необхідний для Google Календаря.
     Після попередньої обробки даних, скрипт сортує їх за допомогою команди sort, а потім за допомогою команди cut відбирає необхідні стовпці для подальшої обробки (рядки 94-95).
     У основній частині скрипта обробляється кожен запис із розкладу. Спочатку очищаються зайві символи, такі як лапки та пробіли (рядки 100-105). Потім здійснюється фільтрація за вибраною академічною групою. 
Якщо група відповідає вибору, з неї видаляється інформація про групу (рядки 107-108). Далі дата і час кожного заняття перетворюються в потрібний формат для Google Календаря (12-годинний формат з AM/PM) (рядки 110-126). Заняття також отримують порядковий номер в залежності від того, чи це лабораторне заняття, чи лекція (рядки 149-161). 
Відформатовані дані виводяться на екран, якщо не заданий ключ -q або записуються у вихідний файл для імпорту в Google Календар (рядки 165-168).

4 ВИСНОВКИ
	У процесі виконання лабораторної роботи було розроблено Bash-скрипт, який обробляє CSV-файл розкладу занять і формує CSV-файл, сумісний із Google Calendar. Було використано команди select, awk, sed, sort, uniq, iconv відповідно до вимог, а також реалізовано обробку аргументів, меню вибору, фільтрацію та форматування даних.

ДОДАТОК В
      1  #!/bin/bash
      2  
      3  VERSION="1.0"
      4  SCRIPT_NAME="$(basename "$0")"
      5  
      6  function print_help {
      7  	echo "Синтаксис:"
      8  	echo "  $SCRIPT_NAME [--help | --version] | [[-q|--quiet] [академ_група] файл_із_cist.csv]"
      9  	echo
      10 	echo "Ключі:"
      11 	echo "  --help        Вивести цю довідку та завершити роботу"
      12 	echo "  --version     Вивести версію скрипта та завершити роботу"
      13 	echo "  -q, --quiet   Не виводити інформацію у стандартний потік виведення"
      14 }
      15 
      16 function print_version {
      17 	echo "$SCRIPT_NAME version $VERSION"
      18 }
      19 
      20 quiet_mode="false"
      21 group=""
      22 file=""
      23 for arg in "$@"; do
      24 	if [[ "$arg" == "--help" ]]; then
      25 		print_help
      26 	exit 0
      27 	elif [[ "$arg" == "--version" ]]; then
      28 		print_version
      29         exit 0
      30 	elif [[ "$arg" == "-q" || "$arg" == "--quiet" ]]; then
      31 		quiet_mode=true
      32 	elif [[ "$arg" == *.csv ]]; then
      33         	file="$arg"
      34 	elif [[ "$arg" =~ ^ПЗПІ-23-[1-5]$ ]]; then
      35         	group="$arg"
      36 	fi
      37 done
      38 
      39 if [[ -z "$file" ]]; then
      40 	echo "Виберіть CSV файл:"
      41 	select file in TimeTable_??_??_20??.csv "QUIT"; do
      42 		if [[ "$file" == "QUIT" ]]; then
      43 			exit 1
      44         	elif [[ -n "$file" && "$file" != "QUIT" ]]; then
      45             	break
      46 		else
      47 			echo "Невірний вибір, спробуйте ще раз."
      48 		fi
      49 	done
      50 fi
      51 
      52 if [[ -z "$group" ]]; then
      53         echo "Виберіть групу:"
      54 	select group in "ПЗПІ-23-1" "ПЗПІ-23-2" "ПЗПІ-23-3" "ПЗПІ-23-4" "ПЗПІ-23-5" "QUIT"; do
      55 		if [[ "$group" == "QUIT" ]]; then
      56 			echo "Вихід"
      57         	exit 0
      58 		elif [[ -n "$group" ]]; then
      59 		break
      60 		else
      61 			echo "Невірний вибір, спробуйте ще раз."
      62 		fi
      63 	done
      64 fi
      65 
      66 output_file="Google_${file}"
      67 output_file="${output_file%.csv}.csv"
      68 
      69 > "$output_file"
      70 
      71 echo "Subject,Description,Start Date,Start Time,End Time" > "$output_file"
      72 
      73 sed 's/\r/ end\n/g' "$file" |
      74 iconv -f cp1251 -t utf8 |
      75 awk 'BEGIN {
      76 	FPAT="[^,]*|\"[^\"]*\""
      77 }
      78 {
      79 	dt = $2
      80 	tm = $3
      81 
      82 	gsub(/"/, "", dt)
      83 	gsub(/"/, "", tm)
      84 
      85 	split(dt, d, ".")
      86 	split(tm, t, ":")
      87 
      88 	if (length(d[1]) && length(d[2]) && length(d[3]) &&
      89 		length(t[1]) && length(t[2]) && length(t[3])) {
      90 		key = sprintf("%04d%02d%02d%02d%02d%02d", d[3], d[2], d[1], t[1], t[2], t[3])
      91 		print key "," $0
      92 	}
      93 }' |
      94 sort -t, -k1,1 |
      95 cut -d, -f2- |
      96 awk -v group="$group" -v quiet="$quiet_mode" -v output="$output_file" '
      97 BEGIN {
      98 	FPAT="[^,]*|\"[^\"]*\""
      99 }
      100{
      101	gsub(/"/, "", $1);
      102	gsub(/"/, "", $2);
      103	gsub(/"/, "", $3);
      104	gsub(/"/, "", $5);
      105	gsub(/"/, "", $12);
      106
      107	if ($1 ~ ("^" group)) {
      108		sub("^" group " - ", "", $1);
      109
      110		split($2, d1, ".")
      111		split($3, tb, ":")
      112		split($5, te, ":")
      113
      114		hb = tb[1] + 0
      115		mb = tb[2]
      116		ampm_b = (hb >= 12 ? "PM" : "AM")
      117		if (hb > 12) hb -= 12
      118		if (hb == 0) hb = 12
      119		start_time = sprintf("%02d:%s %s", hb, mb, ampm_b)
      120
      121		he = te[1] + 0
      122		me = te[2]
      123		ampm_e = (he >= 12 ? "PM" : "AM")
      124		if (he > 12) he -= 12
      125		if (he == 0) he = 12
      126		end_time = sprintf("%02d:%s %s", he, me, ampm_e)
      127
      128		date = sprintf("%02d/%02d/%04d", d1[2], d1[1], d1[3])
      129
      130		split($1, parts, / *; */)
      131		delete subjects
      132		delete group_map
      133		for (i in parts) {
      134			item = parts[i]
      135			gsub(/^ +| +$/, "", item)
      136			if (item == "") continue
      137			match(item, /[A-Za-zА-Яа-яЁёІіЇїЄєҐґЃѓ]+/, m)
      138			if (m[0] != "") {
      139				key = m[0]
      140				group_map[key] = (key in group_map) ? group_map[key] ";" item : item
      141			}
      142		}
      143		idx = 0
      144		for (k in group_map) {
      145			idx++
      146			subjects[idx] = group_map[k]
      147		}
      148
      149		for (i = 1; i <= idx; i++) {
      150			subject = subjects[i]
      151			gsub(/^ +| +$/, "", subject)
      152			if (subject == "") continue
      153
      154			key = "\"" subject " " $1 "\""
      155			if(subject ~/Лб/){
      156				labsAdded[subject]++
      157				number = int((labsAdded[subject] + 1) / 2)
      158			} else {
      159				count[subject]++
      160				number = count[subject]
      161			}
      162
      163			numed_subject = subject "; №" number
      164
      165			if (quiet != "true") {
      166				printf("%s, %s ,%s, %s, %s,\n", numed_subject, $12, date, start_time, end_time)
      167			}
      168			printf("\"%s\",\"%s\",\"%s\",\"%s\",\"%s\"\n", numed_subject, $12, date, start_time, end_time) >> output
      169		}
      170	}
      171}'


