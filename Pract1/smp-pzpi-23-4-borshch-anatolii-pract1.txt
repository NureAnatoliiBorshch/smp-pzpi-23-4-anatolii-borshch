Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії

Практична робота № 1
з дисципліни «Скриптові мови програмування»

Виконав
ст. гр. ПЗПІ-23-4
Борщ Анатолій Сергійович

Перевірив
ст. вик. Сокорчук Ігор Петрович

Харків 2025

ЗАВДАННЯ 1
1.1 Мета роботи
Написати Bash скрипт, який друкуватиме на екрані ялинку із
двох ярусів гілок, стовбура та шару снігу. 
Ялинка повинна бути симетричною.
Яруси гілок повинні утворювати правильні рівнобедрені трикутники у яких сусідні рядки відрізняються на два символи та складаються почергово
або з символів «*» або з символів «#». Ширина усіх ярусів гілок повинна бути на 2 символи вужча ніж ширина снігу.
Висота стовбура та товщина снігу мають бути завжди такі, як у прикладі.
Висота ялинки у рядках разом з шаром снігу та ширина шару снігу в символах
вказується скрипту в його параметрах при запуску.
Параметри скрипта повинні мати додатнє значення.
Вказані значення повинні округлятися до потрібних у меншу сторону.
Якщо за вказаними при запуску скрипта значеннями зобразити ялинку на екрані неможливо,
скрипт повинен вивести у потік помилок сповіщення про неправильне значення аргумента
і повернути відповідний результат у батьківський процес.
У скрипті потрібно обовʼязково використати такі конструкції:
if ... then ... fi  
while ... do ... done  
until ... do ... done  
for ... in .. do ... done  
for ((...)); do ... done  
У скрипті також потрібно використати функцію.  
     
1.2 Хід роботи
1.2.1 З допомогою команди touch було створено новий пустий файл з відповідною назвою pzpi-23-4-borshch-anatolii-task1.
1.2.2 Ввів код для побудови ялинки за параметрами висоти та ширини снігу (див. Додаток А).
1.2.3 Опис усіх блоків коду: 
1. У рядках 1-41 оголошується фнкція draw_tree, яка і буде виконувати побудову всієї ялинки, також виконується підготовка до будування ялинки та валідація введених параметрів. 
     
1. #!/bin/bash
2. draw_tree(){
3. 
4. local height=$1
5. local snow_width=$2
6. local branch_height=$((height / 2))
7. local layer_type=0
8. 
9. if((height <= 0 || snow_width <= 0)); then
10. echo "ПОМИЛКА! Висота та ширина повинні бути додатніми" >&2
11. exit 1
12. fi
13. 
14. if(((height < 8) || (snow_width < 7))); then
15. echo "ПОМИЛКА! Невірні дані." >&2
16. exit 2
17. fi
18. 
19. local dif=$((height - snow_width))
20. if (( (dif < 0) || (dif > 2))); then
21. echo "ПОМИЛКА! Невірні дані." >&2
22. exit 3
23. fi
24. 
25. if (( height % 2 != 0  && snow_width % 2 != 0)); then
26. if ((dif == 0)); then
27. echo "ПОМИЛКА! НЕ можливо побудувати ялинку!" >&2
28. exit 4
29. fi
30. fi
31. 
32. if ((height % 2 ==0 && snow_width % 2 == 0)); then
33. if (( dif == 2)); then
34. echo "ПОМИЛКА! НЕ можливо побудувати ялинку!" >&2
35. exit 5
36. fi
37. fi
38. 
39. if ((snow_width % 2 ==0)); then
40. ((snow_width--))
41. fi

     2. У рядка 43-57 оголошується функція draw_branch, яка є вкладеною та виконує побудову одного рядка ялинки.
43. draw_branch(){
44. local i=$1
45. local stars=$((2 * i + 1))
46. local spaces=$((snow_width / 2 - i))
47. printf "%${spaces}s" ""
48. 
49. for((j=0; j < stars; j++)); do
50. if((layer_type % 2 == 0)); then
51. printf "*"
52. else
53. printf "#"
54. fi
55. done
56. printf "\n"
57. }

     3. У рядках 59-71 виконується побудова самої ялинки з використанням метода draw_branch та визначених перевірених параметрів.
     
59. local i=0
60. while((i < branch_height - 1)); do
61. draw_branch $i
62. ((layer_type++))
63. ((i++))
64. Done
65. 
66. local i=1
67. until ((i >= branch_height - 1)); do
68. draw_branch $i
69. ((layer_type++))
70. ((i++))
71. Done
4. У рядках 73-86 виконано побудову стовбура та отанього шару снігу.
73. for line in 1 2; do
74. printf "%$((snow_width / 2 - 3 / 2))s" ""
75. 
76. for((j=0; j < 3; j++)); do
77. printf "#"
78. done
79. printf "\n"
80. done
81. 
82. for((i=0; i < snow_width; i++)); do
83. printf "*"
84. done
85. 
86. printf "\n"
87. 

     5. У рядках 89-97 виконано перевірку кількості введених параметрів, та виклик функції з цими параметрами.


89. if(( $# != 2)); then
90. echo "ПОМИЛКА! Потрібно 2 параметри!" >&2
91. exit 1
92. fi
93. 
94. height=$(($1))
95. snow_width=$(($2))
96. 
97. draw_tree $height $snow_width
У коді було використано усі види циклів та функції, визначені умовою.
6. Після створення скрипта файл був збережений та за допомогою команди chmod a+x зроблено виконуваним 
з можливістю редагування лише для власника.

1.3 Висновки
Під час виконання завдання я навчився створювати Bash-скрипти з використанням умовних конструкцій, 
циклів різного типу, функцій та обробки параметрів, реалізував побудову симетричної ялинки із 
заданими параметрами висоти та ширини, навчився проводити валідацію введених даних, працювати з потоками помилок 
та керувати правами доступу до скрипта згідно з вимогами.

Додаток А

1. #!/bin/bash
2. draw_tree(){
3. 
4. local height=$1
5. local snow_width=$2
6. local branch_height=$((height / 2))
7. local layer_type=0
8. 
9. if((height <= 0 || snow_width <= 0)); then
10. echo "ПОМИЛКА! Висота та ширина повинні бути додатніми" >&2
11. exit 1
12. fi
13. 
14. if(((height < 8) || (snow_width < 7))); then
15. echo "ПОМИЛКА! Невірні дані." >&2
16. exit 2
17. fi
18. 
19. local dif=$((height - snow_width))
20. if (( (dif < 0) || (dif > 2))); then
21. echo "ПОМИЛКА! Невірні дані." >&2
22. exit 3
23. fi
24. 
25. if (( height % 2 != 0  && snow_width % 2 != 0)); then
26. if ((dif == 0)); then
27. echo "ПОМИЛКА! НЕ можливо побудувати ялинку!" >&2
28. exit 4
29. fi
30. fi
31. 
32. if ((height % 2 ==0 && snow_width % 2 == 0)); then
33. if (( dif == 2)); then
34. echo "ПОМИЛКА! НЕ можливо побудувати ялинку!" >&2
35. exit 5
36. fi
37. fi
38. 
39. if ((snow_width % 2 ==0)); then
40. ((snow_width--))
41. fi
42. 
43. draw_branch(){
44. local i=$1
45. local stars=$((2 * i + 1))
46. local spaces=$((snow_width / 2 - i))
47. printf "%${spaces}s" ""
48. 
49. for((j=0; j < stars; j++)); do
50. if((layer_type % 2 == 0)); then
51. printf "*"
52. else
53. printf "#"
54. fi
55. done
56. printf "\n"
57. }
58. 
59. local i=0
60. while((i < branch_height - 1)); do
61. draw_branch $i
62. ((layer_type++))
63. ((i++))
64. Done
65. 
66. local i=1
67. until ((i >= branch_height - 1)); do
68. draw_branch $i
69. ((layer_type++))
70. ((i++))
71. done
72. 
73. for line in 1 2; do
74. printf "%$((snow_width / 2 - 3 / 2))s" ""
75. 
76. for((j=0; j < 3; j++)); do
77. printf "#"
78. done
79. printf "\n"
80. done
81. 
82. for((i=0; i < snow_width; i++)); do
83. printf "*"
84. done
85. 
86. printf "\n"
87. }
88. 
89. if(( $# != 2)); then
90. echo "ПОМИЛКА! Потрібно 2 параметри!" >&2
91. exit 1
92. fi
93. 
94. height=$(($1))
95. snow_width=$(($2))
96. 
97. draw_tree $height $snow_width

